version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    restart: always
    networks:
      - app_network
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_WEB_PORT}:${RABBITMQ_WEB_PORT}"
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"
    networks:
      - app_network
    healthcheck:    
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]    
      interval: 10s    
      timeout: 5s    
      retries: 5
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis-data:/data
    networks:
      - app_network
  message_service:
    build:
      context: .
      dockerfile: deployments/message/Dockerfile
    depends_on:
      mongodb:    
        condition: service_started  
      redis:    
        condition: service_started  
      rabbitmq:    
        condition: service_healthy
    ports:
      - "50051:50051"
      - "8080:8080"
    networks:
      - app_network
  notification_service:
    build:
      context: .
      dockerfile: deployments/notification/Dockerfile
    depends_on:
      rabbitmq:    
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - app_network

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis-data:
    driver: local

networks:
  app_network:
    driver: bridge